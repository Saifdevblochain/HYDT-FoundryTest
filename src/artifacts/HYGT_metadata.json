{
	"compiler": {
		"version": "0.8.19+commit.7dd6d404"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "team_",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "treasury_",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "delegator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "fromDelegate",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "toDelegate",
						"type": "address"
					}
				],
				"name": "DelegateChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "delegate",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "previousBalance",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newBalance",
						"type": "uint256"
					}
				],
				"name": "DelegateVotesChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "previousAdminRole",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "newAdminRole",
						"type": "bytes32"
					}
				],
				"name": "RoleAdminChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleGranted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleRevoked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "locker",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "unlockedAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "intervalCounter",
						"type": "uint256"
					}
				],
				"name": "Unlock",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "CALLER_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "DEFAULT_ADMIN_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "DOMAIN_SEPARATOR",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "LOCKER_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "burn",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "burnFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "checkpoints",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "fromBlock",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "votes",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "subtractedValue",
						"type": "uint256"
					}
				],
				"name": "decreaseAllowance",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "delegatee",
						"type": "address"
					}
				],
				"name": "delegate",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "delegates",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "getCurrentVotes",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "blockNumber",
						"type": "uint256"
					}
				],
				"name": "getPriorVotes",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					}
				],
				"name": "getRoleAdmin",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "grantRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "hasRole",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "addedValue",
						"type": "uint256"
					}
				],
				"name": "increaseAllowance",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "earn_",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "farm_",
						"type": "address"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "lockups",
				"outputs": [
					{
						"internalType": "bool",
						"name": "status",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "baseAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "unlockedAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "startTime",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "intervalCounter",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalIntervals",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "maxSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "mint",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "nonces",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "numCheckpoints",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "permit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "renounceRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "revokeRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unlock",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "xxxx",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"events": {
				"Approval(address,address,uint256)": {
					"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
				},
				"RoleAdminChanged(bytes32,bytes32,bytes32)": {
					"details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
				},
				"RoleGranted(bytes32,address,address)": {
					"details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
				},
				"RoleRevoked(bytes32,address,address)": {
					"details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
				},
				"Transfer(address,address,uint256)": {
					"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
				}
			},
			"kind": "dev",
			"methods": {
				"DOMAIN_SEPARATOR()": {
					"details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
				},
				"allowance(address,address)": {
					"details": "See {IERC20-allowance}."
				},
				"approve(address,uint256)": {
					"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
				},
				"balanceOf(address)": {
					"details": "See {IERC20-balanceOf}."
				},
				"burn(uint256)": {
					"details": "See {ERC20-_burn}."
				},
				"burnFrom(address,uint256)": {
					"details": "Destorys `amount` tokens from `from` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Emits a {Transfer} event with `to` set to the zero address. Requirements: - `from` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
				},
				"constructor": {
					"params": {
						"team_": "The address of the `Team` wallet.",
						"treasury_": "The address of the `Treasury` wallet."
					}
				},
				"decimals()": {
					"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
				},
				"decreaseAllowance(address,uint256)": {
					"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
				},
				"delegate(address)": {
					"params": {
						"delegatee": "The address to delegate votes to."
					}
				},
				"getCurrentVotes(address)": {
					"params": {
						"account": "The address to get votes balance."
					}
				},
				"getPriorVotes(address,uint256)": {
					"details": "Block number must be a finalized block or else this function will revert to prevent misinformation.",
					"params": {
						"account": "The address of the account to check.",
						"blockNumber": "The block number to get the vote balance at."
					}
				},
				"getRoleAdmin(bytes32)": {
					"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
				},
				"grantRole(bytes32,address)": {
					"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
				},
				"hasRole(bytes32,address)": {
					"details": "Returns `true` if `account` has been granted `role`."
				},
				"increaseAllowance(address,uint256)": {
					"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
				},
				"initialize(address,address)": {
					"details": "This function can only be called once.",
					"params": {
						"earn_": "The address of the `Earn` contract.",
						"farm_": "The address of the `Farm` contract."
					}
				},
				"maxSupply()": {
					"details": "Returns the maximum amount of tokens that can be minted."
				},
				"mint(address,uint256)": {
					"details": "See {ERC20-_mint}. Requirements: - the caller must have the `Caller` role. - `amount` must not cause `_callerSupply` to exceed 20% of the `_maxSupply`."
				},
				"name()": {
					"details": "Returns the name of the token."
				},
				"nonces(address)": {
					"details": "See {IERC20Permit-nonces}."
				},
				"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
					"details": "See {IERC20Permit-permit}."
				},
				"renounceRole(bytes32,address)": {
					"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
				},
				"revokeRole(bytes32,address)": {
					"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
				},
				"supportsInterface(bytes4)": {
					"details": "See {IERC165-supportsInterface}."
				},
				"symbol()": {
					"details": "Returns the symbol of the token, usually a shorter version of the name."
				},
				"totalSupply()": {
					"details": "See {IERC20-totalSupply}."
				},
				"transfer(address,uint256)": {
					"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
				},
				"transferFrom(address,address,uint256)": {
					"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
				},
				"unlock()": {
					"details": "Unlocks vested tokens to their corresponding locker."
				}
			},
			"stateVariables": {
				"ONE_MONTH_TIME": {
					"details": "Fixed time duration variables."
				},
				"_callerSupply": {
					"details": "Supply that has been minted by the any callers."
				},
				"_initializer": {
					"details": "Initialization variables."
				},
				"_maxSupply": {
					"details": "Maximum possible supply that can exist at a given time which is 1 Billion Tokens."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"constructor": {
					"notice": "Setting max supply and minting inital supply at contract creation."
				},
				"delegate(address)": {
					"notice": "Delegate votes from `_msgSender()` to `delegatee`."
				},
				"getCurrentVotes(address)": {
					"notice": "Gets the current votes balance for `account`."
				},
				"getPriorVotes(address,uint256)": {
					"notice": "Determine the prior number of votes for an account as of a block number."
				},
				"initialize(address,address)": {
					"notice": "Initializes external dependencies and state variables."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"src/HYGT.sol": "HYGT"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"src/HYGT.sol": {
			"keccak256": "0x3fd84515788e46c425845fb4be028e4a660ed1abb6601afb9164d5c762610a39",
			"license": "GNU GPLv3",
			"urls": [
				"bzz-raw://06c881c454664a39d7c48cc4a3022927ad097d1b151954aa980aebbae661c173",
				"dweb:/ipfs/QmfSoiaofAJWbDUkSA6ioknMV85xKUMAjYFNZpyE22CWp9"
			]
		},
		"src/extensions/ERC20.sol": {
			"keccak256": "0x1f261ff592653ece7a6b0560754694f968ece3892b1f749accf1640d4a9d6bb8",
			"license": "MIT",
			"urls": [
				"bzz-raw://381451c7046c04bebfaba3ee44af65b3875c963467328c0018614120af871ec4",
				"dweb:/ipfs/QmZ12nHrE3d6Si4XYcN9SP8xB4hJJDx52MN4RkUzCCoEuj"
			]
		},
		"src/interfaces/IAccessControl.sol": {
			"keccak256": "0x89c6c2a63dc6c357c6108de150ab329ad7f847f3ff00a35bcd55f769f4ebcad4",
			"license": "MIT",
			"urls": [
				"bzz-raw://cadec590da43255289e7db8e08a0760869efa64c543dbd8af46690ce5295d497",
				"dweb:/ipfs/QmZsPSyWeA3aZgDgtXMMx11wvTadrf5FzrxkWDbUfM11Ue"
			]
		},
		"src/interfaces/IERC165.sol": {
			"keccak256": "0x3213cb47aba4f8ba951dc5671d44e3559fecec1e9c402e679fbb5ada255fdff1",
			"license": "MIT",
			"urls": [
				"bzz-raw://fc2296c533793e4c2a6eb4909bd2ca8e99044aff82e3fe2049092bd3f62034a3",
				"dweb:/ipfs/QmVwAULUUqeXLdggzzW1C3hdNUZbqHoCskoGyfzZ5EKcwW"
			]
		},
		"src/interfaces/IERC20.sol": {
			"keccak256": "0xd49070e01df31c9f39ed67f7cb2844d842b5fc4c07048156f77f1ac06956a223",
			"license": "MIT",
			"urls": [
				"bzz-raw://a7a56689e6a846ee765a66e30a816b0fe65eba41d2f16beb5bd57a7f7daf1027",
				"dweb:/ipfs/QmduVybj3AaRyHwRRnmjxsG5jPERmFBEUH9EcXwVM5kPyC"
			]
		},
		"src/interfaces/IERC20Metadata.sol": {
			"keccak256": "0x1ffe2047e11fcdd75b2aca845ef3428d93765011f9bdb0ca7bf5d9f95f62656a",
			"license": "MIT",
			"urls": [
				"bzz-raw://7b608f183a24077b867dcf21b1e5956b431291324b6025cbb864eb295e005307",
				"dweb:/ipfs/QmPsgCmqe4HYkFpvYJGWWbkLoQEdhWDzmhG6Lv54FXua8W"
			]
		},
		"src/interfaces/IERC20Permit.sol": {
			"keccak256": "0x7593e149ceb83bfb0b3ef1252be3d79f784eb46fa74fa8ee72a5782803e7056a",
			"license": "MIT",
			"urls": [
				"bzz-raw://25f85848e1c684f9c1cad51d1603d608116b14e54e191f3383ddd431d46e1b93",
				"dweb:/ipfs/QmQnmnPtFGYcbAjc5HL9F5UxytDSFqSDLeBoXYJXyPMdvR"
			]
		},
		"src/interfaces/IHYGT.sol": {
			"keccak256": "0x4fcf60fe5c55a47ff3e09e0bd1e0f7d6f3eb702fdece7bf42557addc06c560b9",
			"license": "GNU GPLv3",
			"urls": [
				"bzz-raw://4dd8c8386ff0b453060dde1c14df745a01b223ebee009bffa60fd7db12b60bf6",
				"dweb:/ipfs/QmSbZNSDekfnkuntfMs8DokKkwdGrkmM3KDtkEYDS8X4pT"
			]
		},
		"src/libraries/Counters.sol": {
			"keccak256": "0xcd3060478742f60f310d1a1416a1d28bc9304173b57fae06928212dc7c292538",
			"license": "MIT",
			"urls": [
				"bzz-raw://b2511f343ab2b55070d4830ba30a0871650f7ae657089a54cd8bddfa302f4430",
				"dweb:/ipfs/QmTA9B3CJX834TXAxhYthrj6VtSCUoSHnqKeCzwt3v1e18"
			]
		},
		"src/libraries/ECDSA.sol": {
			"keccak256": "0xd7e09c1c4434d095616c6703cdc7f8530e4a4118b5e03f5cbd8b79c59a45579e",
			"license": "MIT",
			"urls": [
				"bzz-raw://ed5acce064bc7e06f0a85314929656a989b1f8010555c03d2ffd235f5ad00526",
				"dweb:/ipfs/QmeLWeNrasLCyirf3urdbMtJqBYmrLTyCitfzcC4nPZXK1"
			]
		},
		"src/libraries/Math.sol": {
			"keccak256": "0xfc18275f00047f613f761247e4f3ec788843036f7f426b3fd3b74e251e45f7ae",
			"license": "MIT",
			"urls": [
				"bzz-raw://acc7cebc92fed34db103599e2bde11669280f6e9062fc42d000969ee0e9e8443",
				"dweb:/ipfs/QmQh4ArebQ7tuHEEPyHfeZKctXbC6zPRRnZ7bZM5GNkgh7"
			]
		},
		"src/libraries/SignedMath.sol": {
			"keccak256": "0xb4a5f5f5222294665d6241a5c06558d4939617ebd0a49d1eb9c0e193fd19bdfe",
			"license": "MIT",
			"urls": [
				"bzz-raw://be7f6a069d156446211053299916948102d357d813be42c5f1614885e71d81b3",
				"dweb:/ipfs/QmfT2fs3cDWvfoekdfkUQ3ZMz4f8tc2hqnabipbfzW3Xqb"
			]
		},
		"src/libraries/Strings.sol": {
			"keccak256": "0xaa9c663292d9142e4f463d0f876b1b3813e409bdeb321470fb20573d9a68012b",
			"license": "MIT",
			"urls": [
				"bzz-raw://2f7892745f43559c7f4351120ca6829fb71d40ea286268174dd84128657ee915",
				"dweb:/ipfs/QmeT6d7KBXrNcyLGhtj6a5LLHbYHiVVXqQYA6pSNnp8ecH"
			]
		},
		"src/utils/AccessControl.sol": {
			"keccak256": "0x9e9604e591c7f14ea0f18f906494192375b28f2d614279f1dda876de4ee240b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://9e1e5fa779889491b77f631f931fad6ba3b10907766b41d56c42a37fbcbbc664",
				"dweb:/ipfs/QmadpbPf3XFvdH1CVD17VcTmf7ScynmnjEwePFs2WBmGmU"
			]
		},
		"src/utils/Context.sol": {
			"keccak256": "0x2c36c9489879b7c91cdd73bbe8b2584f401aa26f4f252c04f053e824d6ca75c6",
			"license": "MIT",
			"urls": [
				"bzz-raw://3ef20575fc12fd27f252acd28a8d0f65893832f29fd9c82f7ec165121af4572f",
				"dweb:/ipfs/QmZMCoWWDTjhs1CNFMWv4JNWVyyeuzyqteCHhF4heCUYJJ"
			]
		},
		"src/utils/EIP712.sol": {
			"keccak256": "0x1424280a975aaab93cd2a5d7b48b8c95a41237d88bf375ebda6f0be00ceb4048",
			"license": "MIT",
			"urls": [
				"bzz-raw://dc75ee5730a85b4b426e275fba599a023cec0732245ce21dbab55b717ff29ae9",
				"dweb:/ipfs/QmNaQTKZXRzqEuRCzU97eWSzTNcwC3T8E4rryuE2xyvF9J"
			]
		},
		"src/utils/ERC165.sol": {
			"keccak256": "0x0ce3f9c6ef779f4e44ea727f31300501bf3c19af2b27264e1932aef9c70f9300",
			"license": "MIT",
			"urls": [
				"bzz-raw://850c17304062747f819d5c5b30e0f004ad3f36aa55d8407883311bf2fd68caee",
				"dweb:/ipfs/QmZcbvqF24EBStFacFZcganjH7f6Et4RGWYHjy4M5nHiHM"
			]
		},
		"src/utils/ERC20Permit.sol": {
			"keccak256": "0x60eb4b7b3bb8dff6bf01d3e883dabc95dbcfe4cb59629b3dba949024c18ba03c",
			"license": "MIT",
			"urls": [
				"bzz-raw://2d3d1d4d6d4e628de9add5db1dcb2cffc24a448b064b86f7de818c6e6bc3a42c",
				"dweb:/ipfs/QmSgG6Ji4uaNivJvkGEm9dphdx96QJnU5majcXLuxgmVCY"
			]
		}
	},
	"version": 1
}